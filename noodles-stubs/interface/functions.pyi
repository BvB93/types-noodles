from _typeshed import Incomplete
from collections.abc import Callable, Iterable
from typing import Any, Generic, Protocol, SupportsIndex, TypeVar
from typing_extensions import Self

from noodles.workflow.model import Workflow, _SupportsWorkflow

from .decorator import PromisedObject, schedule

_T = TypeVar("_T")
_T_contra = TypeVar("_T_contra", contravariant=True)
_T_co = TypeVar("_T_co", covariant=True)
_RT = TypeVar("_RT")
_KT = TypeVar("_KT")
_VT = TypeVar("_VT")

class _SupportsGetItem(Protocol[_T_contra, _T_co]):
    def __getitem__(self, __key: _T_contra) -> _T_co: ...

class Ref(Generic[_T]):
    def __init__(self, obj: _T) -> None: ...
    def unref(self) -> _T: ...
    def __deepcopy__(self, memo: object) -> Self: ...
    def __serialize__(self, pack: Callable[[Self], _RT]) -> _RT: ...
    @classmethod
    def __construct__(cls, data: _T) -> Ref[_T]: ...

def ref(value: _T) -> Ref[_T]: ...
@schedule
def delay(value: _T) -> _T: ...
@schedule
def gather(*a: _T) -> list[_T]: ...
def gather_all(a: Iterable[_T]) -> list[_T]: ...
@schedule
def gather_dict(**kwargs: _T) -> dict[str, _T]: ...
def unpack(t: _SupportsGetItem[int, _T], n: SupportsIndex) -> _T: ...
@schedule
def set_dict(obj: _T, d: dict[str, Any]) -> _T: ...
@schedule
def create_object(cls: type[_T], members: dict[str, Any]) -> _T: ...
@schedule
def make_tuple(*args: _T) -> tuple[_T, ...]: ...
@schedule
def make_dict(*kwargs: tuple[_KT, _VT]) -> dict[_KT, _VT]: ...
@schedule
def make_list(*args: _T) -> list[_T]: ...
@schedule
def make_set(*args: _T) -> set[_T]: ...

class Quote:
    workflow: Workflow
    def __init__(self, promise: _SupportsWorkflow) -> None: ...
    @property
    def promise(self) -> PromisedObject[Incomplete]: ...

def quote(promise: PromisedObject[_T] | Quote) -> Quote: ...
def unquote(quoted: PromisedObject[_T] | Quote) -> PromisedObject[_T]: ...
@schedule
def construct_object(cls: Callable[[_T], _RT], args: _T) -> _RT: ...
@schedule
def simple_lift(obj: _T) -> _T: ...
def lift(obj: object, memo: dict[int, Incomplete] | None = ...) -> Incomplete: ...
