import inspect
from collections.abc import Callable
from typing import Any, Generic, Protocol, TypedDict, TypeVar, Any
from typing_extensions import NotRequired, ParamSpec

from ..lib import decorator
from ..workflow import Workflow
from .maybe import maybe

_P = ParamSpec("_P")
_T = TypeVar("_T")
_KT = TypeVar("_KT")
_VT = TypeVar("_VT")
_T_contra = TypeVar("_T_contra", contravariant=True)
_T_contra2 = TypeVar("_T_contra2", contravariant=True)
_T_co = TypeVar("_T_co", covariant=True)
_TT = TypeVar("_TT", bound=type[object])
_SIT = TypeVar("_SIT", bound=_SupportsSetItem[Any, Any])

class _SupportsGetItem(Protocol[_T_contra, _T_co]):
    def __getitem__(self, __key: _T_contra) -> _T_co: ...

class _SupportsSetItem(Protocol[_T_contra, _T_contra2]):
    def __setitem__(self, __key: _T_contra, value: _T_contra2) -> None: ...

class _SupportsResult(Protocol[_T_co]):
    def __result__(self) -> _T_co: ...

class _Hints(TypedDict):
    version: NotRequired[str]

def scheduled_function(f: Callable[_P, _T], hints: _Hints | None = ...) -> Callable[_P, PromisedObject[_T]]: ...
@decorator
def schedule(f: Callable[_P, _T], *, version: str = ..., **hints: Any) -> Callable[_P, PromisedObject[_T]]: ...
def has_scheduled_methods(cls: _TT) -> _TT: ...
def schedule_hint(*, version: str = ..., **hints: Any) -> Callable[[Callable[_P, _T]], Callable[_P, PromisedObject[_T]]]: ...
@schedule
@maybe
def getitem(obj: _SupportsGetItem[_KT, _VT], ix: _KT) -> _VT: ...
@schedule
def setitem(obj: _SIT, attr: Any, value: Any) -> _SIT: ...
def update_hints(obj: PromisedObject[Any], data: dict[str, Any]) -> None: ...
def result(obj: _SupportsResult[_T]) -> _T: ...
@schedule
@maybe
def _do_call(obj: Callable[_P, _T], *args: _P.args, **kwargs: _P.kwargs) -> _T: ...

class PromisedObject(Generic[_T], Any):
    def __init__(self, workflow: Workflow[_T]) -> None: ...
    def __call__(self, *args, **kwargs): ...
    def __getattr__(self, attr: str) -> Any: ...
    def __setattr__(self, attr: str, value: Any) -> None: ...
    def __result__(self) -> _T | type[inspect._empty]: ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __ge__(self, other): ...
    def __le__(self, other): ...
    def __bool__(self) -> bool: ...
    def __abs__(self): ...
    def __sub__(self, other): ...
    def __add__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __truediv__(self, other): ...
    def __floordiv__(self, other): ...
    def __mod__(self, other): ...
    def __pow__(self, other): ...
    def __pos__(self): ...
    def __neg__(self): ...
    def __matmul__(self, other): ...
    def __index__(self) -> int: ...
    def __inv__(self): ...
    def __lshift__(self, n): ...
    def __rshift__(self, n): ...
    def __and__(self, other): ...
    def __or__(self, other): ...
    def __xor__(self, other): ...
    def __contains__(self, item) -> bool: ...
    def __getitem__(self, name): ...
    def __setitem__(self, attr, value) -> None: ...
