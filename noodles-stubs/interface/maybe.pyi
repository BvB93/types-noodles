from collections.abc import Callable
from typing import TypeVar
from typing_extensions import ParamSpec, Self, TypeGuard

_P = ParamSpec("_P")
_T = TypeVar("_T")

class Fail:
    name: str
    fails: list[tuple[str, int | str, Fail]]
    trace: list[str]
    exception: Exception
    def __init__(
        self, func, fails: list[tuple[str, int | str, Fail]] | None = ..., exception: Exception | None = ...
    ) -> None: ...
    def add_call(self, func: Callable[..., object]) -> Self: ...
    @property
    def is_root_cause(self) -> bool: ...
    def __bool__(self) -> bool: ...

def failed(obj: object) -> TypeGuard[Fail]: ...
def maybe(func: Callable[_P, _T]) -> Callable[_P, Fail | _T]: ...
