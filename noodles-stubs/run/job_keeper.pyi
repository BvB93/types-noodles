from _typeshed import Incomplete
from collections.abc import Generator

class JobKeeper(dict):
    keep: Incomplete
    lock: Incomplete
    workflows: Incomplete
    def __init__(self, keep: bool = ...) -> None: ...
    def register(self, job): ...
    def __delitem__(self, key) -> None: ...
    def store_result(self, key, status, value, err) -> None: ...
    def message(self) -> Generator[None, Incomplete, None]: ...

class JobTimer(dict):
    workflows: Incomplete
    fo: Incomplete
    owner: bool
    def __init__(self, timing_file, registry: Incomplete | None = ...) -> None: ...
    def register(self, job): ...
    def __delitem__(self, key) -> None: ...
    def message(self) -> Generator[None, Incomplete, None]: ...
    def start(self, key, value, err) -> None: ...
    def done(self, key, value, err) -> None: ...
    def __enter__(self): ...
    def __exit__(self, e_type, e_value, e_tb) -> None: ...
