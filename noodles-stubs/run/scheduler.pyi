from _typeshed import Incomplete

from ..lib import Connection
from ..workflow import Workflow

class Job:
    workflow: Incomplete
    node_id: Incomplete
    def __init__(self, workflow, node_id) -> None: ...
    def __iter__(self): ...
    @property
    def node(self): ...
    @property
    def name(self): ...
    @property
    def hints(self): ...
    @property
    def is_root_node(self): ...

class DynamicLink:
    source: Incomplete
    target: Incomplete
    node: Incomplete
    def __init__(self, source, target, node) -> None: ...
    def __iter__(self): ...

error_msg_1: str

class Scheduler:
    jobs: Incomplete
    dynamic_links: Incomplete
    count: int
    key_map: Incomplete
    verbose: Incomplete
    handle_error: Incomplete
    def __init__(
        self, verbose: bool = ..., error_handler: Incomplete | None = ..., job_keeper: Incomplete | None = ...
    ) -> None: ...
    def run(self, connection: Connection, master: Workflow): ...
    def schedule(self, job, sink) -> None: ...
    def add_workflow(self, wf, target, node, sink) -> None: ...
