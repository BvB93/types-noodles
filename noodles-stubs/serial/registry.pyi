import abc
from _typeshed import Incomplete
from abc import abstractmethod
from collections.abc import Callable, Mapping
from typing import Any, Generic, NoReturn, Protocol, TypedDict, TypeVar
from typing_extensions import NotRequired

_T = TypeVar("_T")
_DT = TypeVar("_DT")

class _RecDict(TypedDict, Generic[_T]):
    _noodles: str
    type: str
    cls: str
    data: _T
    ref: NotRequired[bool]
    host: NotRequired[str | None]
    files: NotRequired[list[str]]

class _MakeRec(Protocol[_T]):
    def __call__(self, data: _T, ref: bool | None = ..., files: None | list[str] = ...) -> _RecDict[_T]: ...

class RefObject(Generic[_T]):
    rec: _RecDict[_T]
    def __init__(self, rec: _RecDict[_T]) -> None: ...

class Registry:
    def __init__(
        self,
        parent: Registry | None = ...,
        types: Mapping[type[Any], Serialiser[Any, Any]] | None = ...,
        hooks: Mapping[str, Serialiser[Any, Any]] | None = ...,
        hook_fn: Incomplete | None = ...,
        default: Serialiser[Any, Any] | None = ...,
    ) -> None: ...
    def __add__(self, other): ...
    @property
    def default(self) -> Serialiser[Any, Any]: ...
    def __getitem__(self, key: type[object]) -> Serialiser[Any, Any]: ...
    def __setitem__(self, cls: type[object], value: Serialiser[Any, Any]) -> None: ...
    def encode(self, obj: object, host: str | None = ...) -> Any: ...
    def decode(self, rec: _RecDict[Any], deref: bool = ...) -> Any: ...
    def deep_encode(self, obj: object, host: str | None = ...) -> Any: ...
    def deep_decode(self, rec: _RecDict[Any], deref: bool = ...) -> Any: ...
    def to_json(self, obj: object, host: str | None = ..., indent: int | None = ...) -> Any: ...
    def from_json(self, data: str | bytes | bytearray, deref: bool = ...) -> Any: ...
    def dereference(self, data: object, host: str | None = ...) -> Any: ...

class Serialiser(Generic[_T, _DT], metaclass=abc.ABCMeta):
    name: str
    def __init__(self, name: str | Callable[..., object] = ...) -> None: ...
    @abstractmethod
    def encode(self, obj: _T, make_rec: _MakeRec[_DT]) -> _RecDict[_DT]: ...
    @abstractmethod
    def decode(self, cls: Callable[[_DT], _T], data: _DT) -> _T: ...

class SerUnknown(Serialiser[object, object]):
    def encode(self, obj: object, make_rec: _MakeRec[object]) -> NoReturn: ...
    def decode(self, cls: object, data: object) -> NoReturn: ...
